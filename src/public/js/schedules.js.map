{
  "version": 3,
  "sources": ["../../views/ts/schedules.ts"],
  "sourcesContent": ["let schedules = [];\n\nfunction getUserIdAndConferenceId(url) {\n  // Create a URL object\n  const urlObj = new URL(url);\n\n  // Get the pathname (e.g., \"/user/schedule/1/1\")\n  const pathSegments = urlObj.pathname.split('/');\n\n  // Extract the last two segments and parse them as numbers\n  return pathSegments.slice(-2).map(Number);\n}\n\nasync function fetchSchedules() {\n  try {\n    const response = await fetch('/user/api/schedule/1/1');\n    schedules = await response.json();\n\n    // Populate the dropdown\n    const dropdown = document.getElementById('scheduleDropdown');\n    schedules.forEach((schedule) => {\n      const option = document.createElement('option');\n      option.value = schedule.id;\n      option.textContent = `Schedule ${schedule.id} - Created on ${schedule.created}`;\n      dropdown.appendChild(option);\n    });\n\n    // Render the first schedule by default\n    renderTimeslots();\n  } catch (error) {\n    console.error('Error fetching schedules:', error);\n  }\n}\n\nfunction renderTimeslots() {\n  const selectedId = (\n    document.getElementById('scheduleDropdown') as HTMLSelectElement\n  ).value;\n  const schedule = schedules.find((s) => s.id === parseInt(selectedId));\n  const tableBody = document.getElementById('timeslotTableBody');\n\n  // Clear existing rows\n  tableBody.innerHTML = '';\n\n  // Render rows for the selected schedule's timeslots\n  schedule.schedule.schedule.forEach((day) => {\n    day.timeslots.forEach((timeslot) => {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        <td class=\"border border-gray-300 px-4 py-2\">${day.date}</td>\n        <td class=\"border border-gray-300 px-4 py-2\">${timeslot.id}</td>\n        <td class=\"border border-gray-300 px-4 py-2\">\n          ${timeslot.presentations\n            .map(\n              (presentation) =>\n                `<div><strong>${presentation.name}</strong> - ${presentation.topic}</div>`,\n            )\n            .join('')}\n        </td>\n      `;\n      tableBody.appendChild(row);\n    });\n  });\n}\n\n// Fetch schedules on page load\ndocument.addEventListener('DOMContentLoaded', fetchSchedules);\ndocument\n  .getElementById('generateSchedule')\n  .addEventListener('click', async () => {\n    try {\n      const [userId, conferenceId] = getUserIdAndConferenceId(\n        window.location.pathname,\n      );\n\n      await fetch(`/user/schedule/${userId}/${conferenceId}`, {\n        method: 'post',\n      });\n\n      alert('Started generating schedule!');\n    } catch (e) {\n      console.error('Something went wrong!', e);\n    }\n  });\n"],
  "mappings": "MAAA,IAAIA,EAAY,CAAC,EAEjB,SAASC,EAAyBC,EAAK,CAQrC,OANe,IAAI,IAAIA,CAAG,EAGE,SAAS,MAAM,GAAG,EAG1B,MAAM,EAAE,EAAE,IAAI,MAAM,CAC1C,CAEA,eAAeC,GAAiB,CAC9B,GAAI,CAEFH,EAAY,MADK,MAAM,MAAM,wBAAwB,GAC1B,KAAK,EAGhC,IAAMI,EAAW,SAAS,eAAe,kBAAkB,EAC3DJ,EAAU,QAASK,GAAa,CAC9B,IAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQD,EAAS,GACxBC,EAAO,YAAc,YAAYD,EAAS,EAAE,iBAAiBA,EAAS,OAAO,GAC7ED,EAAS,YAAYE,CAAM,CAC7B,CAAC,EAGDC,EAAgB,CAClB,OAASC,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,CAClD,CACF,CAEA,SAASD,GAAkB,CACzB,IAAME,EACJ,SAAS,eAAe,kBAAkB,EAC1C,MACIJ,EAAWL,EAAU,KAAMU,GAAMA,EAAE,KAAO,SAASD,CAAU,CAAC,EAC9DE,EAAY,SAAS,eAAe,mBAAmB,EAG7DA,EAAU,UAAY,GAGtBN,EAAS,SAAS,SAAS,QAASO,GAAQ,CAC1CA,EAAI,UAAU,QAASC,GAAa,CAClC,IAAMC,EAAM,SAAS,cAAc,IAAI,EACvCA,EAAI,UAAY;AAAA,uDACiCF,EAAI,IAAI;AAAA,uDACRC,EAAS,EAAE;AAAA;AAAA,YAEtDA,EAAS,cACR,IACEE,GACC,gBAAgBA,EAAa,IAAI,eAAeA,EAAa,KAAK,QACtE,EACC,KAAK,EAAE,CAAC;AAAA;AAAA,QAGfJ,EAAU,YAAYG,CAAG,CAC3B,CAAC,CACH,CAAC,CACH,CAGA,SAAS,iBAAiB,mBAAoBX,CAAc,EAC5D,SACG,eAAe,kBAAkB,EACjC,iBAAiB,QAAS,SAAY,CACrC,GAAI,CACF,GAAM,CAACa,EAAQC,CAAY,EAAIhB,EAC7B,OAAO,SAAS,QAClB,EAEA,MAAM,MAAM,kBAAkBe,CAAM,IAAIC,CAAY,GAAI,CACtD,OAAQ,MACV,CAAC,EAED,MAAM,8BAA8B,CACtC,OAAS,EAAG,CACV,QAAQ,MAAM,wBAAyB,CAAC,CAC1C,CACF,CAAC",
  "names": ["schedules", "getUserIdAndConferenceId", "url", "fetchSchedules", "dropdown", "schedule", "option", "renderTimeslots", "error", "selectedId", "s", "tableBody", "day", "timeslot", "row", "presentation", "userId", "conferenceId"]
}
